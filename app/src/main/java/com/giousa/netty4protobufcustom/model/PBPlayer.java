// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: player2.proto at 5:1
package com.giousa.netty4protobufcustom.model;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class PBPlayer extends Message<PBPlayer, PBPlayer.Builder> {
  public static final ProtoAdapter<PBPlayer> ADAPTER = new ProtoAdapter_PBPlayer();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_PLAYERID = 0L;

  public static final Integer DEFAULT_AGE = 0;

  public static final String DEFAULT_NAME = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64",
      label = WireField.Label.REQUIRED
  )
  public final Long playerId;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer age;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String name;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REPEATED
  )
  public final List<Integer> skills;

  public PBPlayer(Long playerId, Integer age, String name, List<Integer> skills) {
    this(playerId, age, name, skills, ByteString.EMPTY);
  }

  public PBPlayer(Long playerId, Integer age, String name, List<Integer> skills, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.playerId = playerId;
    this.age = age;
    this.name = name;
    this.skills = Internal.immutableCopyOf("skills", skills);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.playerId = playerId;
    builder.age = age;
    builder.name = name;
    builder.skills = Internal.copyOf("skills", skills);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PBPlayer)) return false;
    PBPlayer o = (PBPlayer) other;
    return unknownFields().equals(o.unknownFields())
        && playerId.equals(o.playerId)
        && age.equals(o.age)
        && name.equals(o.name)
        && skills.equals(o.skills);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + playerId.hashCode();
      result = result * 37 + age.hashCode();
      result = result * 37 + name.hashCode();
      result = result * 37 + skills.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", playerId=").append(playerId);
    builder.append(", age=").append(age);
    builder.append(", name=").append(name);
    if (!skills.isEmpty()) builder.append(", skills=").append(skills);
    return builder.replace(0, 2, "PBPlayer{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<PBPlayer, Builder> {
    public Long playerId;

    public Integer age;

    public String name;

    public List<Integer> skills;

    public Builder() {
      skills = Internal.newMutableList();
    }

    public Builder playerId(Long playerId) {
      this.playerId = playerId;
      return this;
    }

    public Builder age(Integer age) {
      this.age = age;
      return this;
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder skills(List<Integer> skills) {
      Internal.checkElementsNotNull(skills);
      this.skills = skills;
      return this;
    }

    @Override
    public PBPlayer build() {
      if (playerId == null
          || age == null
          || name == null) {
        throw Internal.missingRequiredFields(playerId, "playerId",
            age, "age",
            name, "name");
      }
      return new PBPlayer(playerId, age, name, skills, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PBPlayer extends ProtoAdapter<PBPlayer> {
    ProtoAdapter_PBPlayer() {
      super(FieldEncoding.LENGTH_DELIMITED, PBPlayer.class);
    }

    @Override
    public int encodedSize(PBPlayer value) {
      return ProtoAdapter.INT64.encodedSizeWithTag(1, value.playerId)
          + ProtoAdapter.INT32.encodedSizeWithTag(2, value.age)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.name)
          + ProtoAdapter.INT32.asRepeated().encodedSizeWithTag(4, value.skills)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PBPlayer value) throws IOException {
      ProtoAdapter.INT64.encodeWithTag(writer, 1, value.playerId);
      ProtoAdapter.INT32.encodeWithTag(writer, 2, value.age);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.name);
      ProtoAdapter.INT32.asRepeated().encodeWithTag(writer, 4, value.skills);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PBPlayer decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.playerId(ProtoAdapter.INT64.decode(reader)); break;
          case 2: builder.age(ProtoAdapter.INT32.decode(reader)); break;
          case 3: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.skills.add(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PBPlayer redact(PBPlayer value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
